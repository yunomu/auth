AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: auth

Parameters:
  DomainName:
    Type: String
  Certificate:
    Type: String
  ConsoleDomainName:
    Type: String
  CallbackURL:
    Type: String
  LogoutURL:
    Type: String
  CloudFrontManagedCachePolicy:
    Type: String
    Default: "658327ea-f89d-4fab-a63d-7e88639e58f6"

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: False
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref DomainName
      CustomDomainConfig:
        CertificateArn: !Ref Certificate

  UserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/stack/${AWS::StackName}/UserPoolId"
      Value: !Ref UserPool

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ClientId
          AttributeType: S
      KeySchema:
        - AttributeName: ClientId
          KeyType: HASH

  ProductTableReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:DescribeTable
            Resource:
              - !GetAtt ProductTable.Arn
              - !Sub
                - "${TableARN}/index/*"
                - { TableARN: !GetAtt ProductTable.Arn }

  ProductTableWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt ProductTable.Arn
              - !Sub
                - "${TableARN}/index/*"
                - { TableARN: !GetAtt ProductTable.Arn }

  RestrictionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH

  RestrictionTableReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:DescribeTable
            Resource:
              - !GetAtt RestrictionTable.Arn
              - !Sub
                - "${TableARN}/index/*"
                - { TableARN: !GetAtt RestrictionTable.Arn }

  RestrictionTableWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt RestrictionTable.Arn
              - !Sub
                - "${TableARN}/index/*"
                - { TableARN: !GetAtt RestrictionTable.Arn }

  PreSignupFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: lambda/presignup/
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - !Ref ProductTableReadPolicy
        - !Ref RestrictionTableReadPolicy
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PreSignUp
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          PRODUCT_TABLE: !Ref ProductTable
          RESTRICTION_TABLE: !Ref RestrictionTable

  PreAuthenticationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: lambda/preauth/
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - !Ref ProductTableReadPolicy
        - !Ref RestrictionTableReadPolicy
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PreAuthentication
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          PRODUCT_TABLE: !Ref ProductTable
          RESTRICTION_TABLE: !Ref RestrictionTable

  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      CallbackURLs:
        - !Ref CallbackURL
      LogoutURLs:
        - !Ref LogoutURL
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        IdToken: "hours"
        AccessToken: "hours"
        RefreshToken: "days"
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30

  AdminApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - POST
          - GET
          - OPTIONS
        AllowOrigins:
          - '*'
      Auth:
        Authorizers:
          OAuth2Authorizer:
            IdentitySource: '$request.header.Authorization'
            JwtConfiguration:
              audience:
                - !Ref AdminUserPoolClient
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
        DefaultAuthorizer: OAuth2Authorizer

  StaticFileBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false

  StaticFileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticFileBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${StaticFileBucket}/*"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${AWS::StackName}"

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref ConsoleDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          CachePolicyId: !Ref CloudFrontManagedCachePolicy
          TargetOriginId: !Sub "s3-${StaticFileBucket}"
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - GET
            - HEAD
        Origins:
          - Id: !Sub "s3-${StaticFileBucket}"
            DomainName: !GetAtt StaticFileBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: !Sub "api-${AdminApi}"
            DomainName: !Sub "${AdminApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/v1"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5

  AdminApiRestrictionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/restrictions/
      Handler: bootstrap
      Runtime: provided.al2
      Policies:
        - !Ref RestrictionTableReadPolicy
        - !Ref RestrictionTableWritePolicy
      Events:
        API:
          Type: HttpApi
          Properties:
            ApiId: !Ref AdminApi
            Method: GET
            Path: /restrictions
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          RESTRICTION_TABLE: !Ref RestrictionTable

Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolIdSSM:
    Value: !Ref UserPoolId
  RestrictionTable:
    Value: !Ref RestrictionTable
  ProductTable:
    Value: !Ref ProductTable
